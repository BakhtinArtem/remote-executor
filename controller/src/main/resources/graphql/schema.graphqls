type Query {
    allGraphs: [Graph]!
    graphById(id: ID): Graph
    executeGraph(graphId: Int): Execution!
}

type Mutation {
    createGraph(input: GraphInput): Graph!
    updateGraph(input: GraphInput): Graph!
    deleteGraph(graphId: ID): ID
}

input GraphInput {
    id: ID
    name: String!
    nodes: [NodeInput!]!
    edges: [EdgeInput!]!
}

input NodeInput {
    id: ID
    filename: String!
    image: String!
    isRoot: Boolean!
}

input EdgeInput {
    id: ID
    from: Int!
    to: Int!
}

type Node {
    id: ID
    filename: String!
    image: String!
    isRoot: Boolean!
}

type Edge {
    id: ID
    fromNode: Node!
    toNode: Node!
}

enum ExecutionStatus {
    IDLE,
    RUNNING,
    ERROR,
    FINISHED
}

type Execution {
    id: ID
    startTime: String!
    endTime: String!
    status: ExecutionStatus!
}

type Graph {
    id: ID
    name: String!
    nodes: [Node]!
    edges: [Edge]!
}